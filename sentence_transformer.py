{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-08-01T01:30:56.410324Z\",\"iopub.execute_input\":\"2024-08-01T01:30:56.410823Z\",\"iopub.status.idle\":\"2024-08-01T01:31:13.411874Z\",\"shell.execute_reply.started\":\"2024-08-01T01:30:56.410780Z\",\"shell.execute_reply\":\"2024-08-01T01:31:13.410112Z\"}}\n!pip install sentence-transformers\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-08-01T01:31:13.414536Z\",\"iopub.execute_input\":\"2024-08-01T01:31:13.414925Z\",\"iopub.status.idle\":\"2024-08-01T01:31:40.634660Z\",\"shell.execute_reply.started\":\"2024-08-01T01:31:13.414880Z\",\"shell.execute_reply\":\"2024-08-01T01:31:40.633488Z\"}}\n\"\"\"\nThis is a simple application for sentence embeddings: semantic search\n\nWe have a corpus with various sentences. Then, for a given query sentence,\nwe want to find the most similar sentence in this corpus.\n\nThis script outputs for various queries the top 5 most similar sentences in the corpus.\n\"\"\"\n\nimport torch\n\nfrom sentence_transformers import SentenceTransformer\n\nembedder = SentenceTransformer(\"multi-qa-mpnet-base-dot-v1\")\n\n# Corpus with example sentences\ncorpus = [\n    \"A man is eating food.\",\n    \"A man is eating a piece of bread.\",\n    \"The girl is carrying a baby.\",\n    \"A man is riding a horse.\",\n    \"A woman is playing violin.\",\n    \"Two men pushed carts through the woods.\",\n    \"A man is riding a white horse on an enclosed ground.\",\n    \"A monkey is playing drums.\",\n    \"A cheetah is running behind its prey.\",\n]\n# Use \"convert_to_tensor=True\" to keep the tensors on GPU (if available)\ncorpus_embeddings = embedder.encode(corpus, convert_to_tensor=True)\n\n# Query sentences:\nqueries = [\n    \"A man is eating pasta.\",\n    \"Someone in a gorilla costume is playing a set of drums.\",\n    \"A cheetah chases prey on across a field.\",\n]\n\n# Find the closest 5 sentences of the corpus for each query sentence based on cosine similarity\ntop_k = min(5, len(corpus))\nfor query in queries:\n    query_embedding = embedder.encode(query, convert_to_tensor=True)\n\n    # We use cosine-similarity and torch.topk to find the highest 5 scores\n    similarity_scores = embedder.similarity(query_embedding, corpus_embeddings)[0]\n    scores, indices = torch.topk(similarity_scores, k=top_k)\n\n    print(\"\\nQuery:\", query)\n    print(\"Top 5 most similar sentences in corpus:\")\n\n    for score, idx in zip(scores, indices):\n        print(corpus[idx], \"(Score: {:.4f})\".format(score))\n\n    \"\"\"\n    # Alternatively, we can also use util.semantic_search to perform cosine similarty + topk\n    hits = util.semantic_search(query_embedding, corpus_embeddings, top_k=5)\n    hits = hits[0]      #Get the hits for the first query\n    for hit in hits:\n        print(corpus[hit['corpus_id']], \"(Score: {:.4f})\".format(hit['score']))\n    \"\"\"","metadata":{"_uuid":"f343cd2b-6004-43c0-9b74-5e6b56c0a9db","_cell_guid":"a46cce67-18d2-42b6-8200-29ce019dad98","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}